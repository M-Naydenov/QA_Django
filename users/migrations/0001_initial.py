# Generated by Django 5.2.3 on 2025-07-22 12:05

import django.core.validators
import django.db.models.deletion
import users.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_name', models.CharField(validators=[django.core.validators.MinLengthValidator(2)])),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.RegexValidator(message="Email can only contain letters, numbers and '.', followed by the company domain. ", regex='^[a-zA-z][a-zA-Z0-9.]+(@entaingroup.com){1}$')])),
                ('icepor', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator(message='Icepor can only contain letters and numbers.', regex='^[a-zA-Z0-9]+$')])),
                ('first_name', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.RegexValidator(message='First name can only contain letters.', regex='^[a-zA-Z]+$')])),
                ('last_name', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.RegexValidator(message='Last name can only contain letters.', regex='^[a-zA-Z]+$')])),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('tl', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agents', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.department')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', users.managers.AgentManager()),
            ],
        ),
        migrations.CreateModel(
            name='Analyst',
            fields=[
            ],
            options={
                'verbose_name': 'Analyst',
                'verbose_name_plural': 'Analysts',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.agent',),
            managers=[
                ('objects', users.managers.AgentManager()),
            ],
        ),
        migrations.CreateModel(
            name='DeputyManager',
            fields=[
            ],
            options={
                'verbose_name': 'Deputy',
                'verbose_name_plural': 'Deputies',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.agent',),
            managers=[
                ('objects', users.managers.AgentManager()),
            ],
        ),
        migrations.CreateModel(
            name='OperationsManager',
            fields=[
            ],
            options={
                'verbose_name': 'Operations Manager',
                'verbose_name_plural': 'Operations Managers',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.agent',),
            managers=[
                ('objects', users.managers.AgentManager()),
            ],
        ),
        migrations.CreateModel(
            name='SeniorAnalyst',
            fields=[
            ],
            options={
                'verbose_name': 'Senior Analyst',
                'verbose_name_plural': 'Senior Analysts',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.agent',),
            managers=[
                ('objects', users.managers.AgentManager()),
            ],
        ),
        migrations.CreateModel(
            name='TeamLeader',
            fields=[
            ],
            options={
                'verbose_name': 'Team Leader',
                'verbose_name_plural': 'Team Leaders',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.agent',),
            managers=[
                ('objects', users.managers.AgentManager()),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('work_title', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.RegexValidator(message='Work title can only contain letters and numbers.', regex='^[a-zA-Z0-9]+$')])),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.department')),
            ],
        ),
        migrations.AddField(
            model_name='agent',
            name='role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.role'),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(validators=[django.core.validators.MinLengthValidator(2), django.core.validators.RegexValidator(message='Team name can only contain letters and numbers.', regex='^[a-zA-Z0-9]+$')])),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.department')),
            ],
        ),
        migrations.AddField(
            model_name='agent',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.team'),
        ),
    ]
